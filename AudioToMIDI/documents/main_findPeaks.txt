    	//TODO TODO TODO delta and skip ??? https://www.youtube.com/watch?v=nYED_-eY4Ys , .1 seconds, difficult to analyze with 
    	//Enumeration.class
    	
    	public List<Integer> findPeaks(Number[] signal, int windowLength, int start, int end, int firstPeak, double zAllowance) {
    		List<Integer> peakIndexes = new ArrayList<Integer>();
    		//TODO firstPeak - start
    		peakIndexes.add(firstPeak - start); //assuming start is the first peak of concern
    		RunningWindowStats rws = new RunningWindowStats(windowLength);
    		end = start + (end - start) / 2;
    		int index = firstPeak;
    		
    		int findPeakWindow = -1;
    		
    	//	System.out.println("Start: " + (firstPeak - start));
    	//	System.out.println("Window Length : " + windowLength);
    		boolean newPeakFound = false;
    		
    		while(index+1 < end) {
    			//Find bottom of peak
    			while(index+1 < end &&
    					signal[index].doubleValue() > signal[index + 1].doubleValue()) {
    				index++;
    			}
//    			System.out.println("Bottom of peak at index: " + index);
    				
    			//Fill up window (may be full from previous peak)
    			//TODO see if this needs to be removed and not worry about filling the window
    			// maybe a modified zAllowance based off rws.size()
    			for(; index < end && !rws.isFull(); index++) {
    /*				if(rws.isFull()) {
    					System.out.println("Window is full at index: " + index);
    					break;
    				} else {
    					rws.add(signal[index]);
    				}*/
    				rws.add(signal[index]);
//    				System.out.println("Window filling: " + index);
    			}
    		
    			//Find beginning of next peak
    			for(; index + 3< end; index++) {
    				double zValue = Math.abs(rws.zScore(signal[index+3]));
//    				System.out.println("i: " + index + " zV: " + zValue);
    				if(zValue <= zAllowance) {
    					rws.add(signal[index]);
    				} else {
    					newPeakFound = true;
//    					System.out.println("Beg of peak at index: " + index);
    					break;
    				}
    			}
    			
    			if(!newPeakFound) {
//    				System.out.println("No new peak found");
    				
    				//break;
    			}
    			
    			/*//Find top of peak  (may have to adjust zAllowance to get above local peaks)
    			while(index+1 < end &&
    					signal[index].doubleValue() < signal[index + 1].doubleValue()) {
    				index++;
    			}*/
    			
    			//Find top of peak
    			if(findPeakWindow == -1) {
    				//As soon as the base of the first peak is found.
    				//Calculate the window based of 1/4 the distance between the
    				//base and the first peak
    				findPeakWindow = (index - start) / 4;
    			}
    			int maxEnd = index + findPeakWindow;
    			if(maxEnd >= end) {
    				maxEnd = end;
    			}
    			
    			if(newPeakFound) {
    				index = Util.maxIndex(signal, index, maxEnd);
    			
    				//TODO The top of the peak may depend on hitting end of signal
    				peakIndexes.add((index - start));
    				//System.out.println("Peak at index: " + (index - start));
    			} else {
    				//System.out.println("No new peak found");
    				break;
    			}
    			newPeakFound = false;
    		}
    		return peakIndexes;
    	}
		List<Integer> peaks2 = findPeaks(fftData, 25,/*(int) audioData.getFormat().getSampleRate() / audioData.getFftLength(),*/ // A good guess for window size
				start, end, maxI,0.000013); // 1 std deviation. Really no backing to this